["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:file","clojure/set.cljs","~:line",11,"~:column",8,"~:end-line",11,"~:end-column",19,"~:doc","Set operations such as union/intersection.","~:author","Rich Hickey"],"~:ns-aliases",["^ ","~$cljs.loader","~$shadow.loader","~$react","~$module$node_modules$react$index"],"~:use-macros",null,"~:excludes",["~#set",[]],"~:name","~$clojure.set","~:reader-aliases",["^ "],"~:imports",null,"~:requires",["^ ","~$cljs.core","^G","~$goog","^H"],"~:seen",["^A",[]],"~:shadow/js-access-global",["^A",["Error"]],"~:uses",null,"~:defs",["^ ","~$union",["^ ","~:protocol-inline",null,"^2",["^ ","^3","clojure/set.cljs","^4",19,"^5",7,"^6",19,"^7",12,"~:arglists",["~#list",["~$quote",["^P",[[],["~$s1"],["^R","~$s2"],["^R","^S","~$&","~$sets"]]]]],"^8","Return a set that is the union of the input sets","~:top-fn",["^ ","~:variadic?",true,"~:fixed-arity",2,"~:max-fixed-arity",2,"~:method-params",[[],["^R"],["^R","^S"]],"^O",["^P",[[],["^R"],["^R","^S"],["^R","^S","~$&","^T"]]],"~:arglists-meta",["^P",[null,null,null,null]]]],"^B","~$clojure.set/union","^3","clojure/set.cljs","^7",12,"^U",["^ ","^V",true,"^W",2,"^X",2,"^Y",[[],["^R"],["^R","^S"]],"^O",["^P",[[],["^R"],["^R","^S"],["^R","^S","~$&","^T"]]],"^Z",["^P",[null,null,null,null]]],"^Y",[[],["^R"],["^R","^S"]],"~:protocol-impl",null,"^W",2,"^Z",["^P",[null,null,null,null]],"^5",1,"^V",true,"~:methods",[["^ ","^W",0,"^V",false,"~:tag","~$cljs.core/ISet"],["^ ","^W",1,"^V",false],["^ ","^W",2,"^V",false,"^12",["^A",[null,"~$any"]]],["^ ","^W",2,"^V",true,"^12",["^A",[null,"^14"]]]],"^4",19,"^6",19,"^X",2,"~:fn-var",true,"^O",["^P",[[],["^R"],["^R","^S"],["^R","^S","~$&","^T"]]],"^8","Return a set that is the union of the input sets"],"~$map-invert",["^ ","^N",null,"^2",["^ ","^3","clojure/set.cljs","^4",97,"^5",7,"^6",97,"^7",17,"^O",["^P",["^Q",["^P",[["~$m"]]]]],"^8","Returns the map with the vals mapped to the keys."],"^B","~$clojure.set/map-invert","^3","clojure/set.cljs","^7",17,"^Y",["^P",[["~$m"]]],"^10",null,"^Z",["^P",[null,null]],"^5",1,"^V",false,"^4",97,"~:ret-tag","~$clj","^6",97,"^X",1,"^15",true,"^O",["^P",["^Q",["^P",[["~$m"]]]]],"^8","Returns the map with the vals mapped to the keys."],"~$join",["^ ","^N",null,"^2",["^ ","^3","clojure/set.cljs","^4",105,"^5",7,"^6",105,"^7",11,"^O",["^P",["^Q",["^P",[["~$xrel","~$yrel"],["^1;","^1<","~$km"]]]]],"^8","When passed 2 rels, returns the rel corresponding to the natural\n  join. When passed an additional keymap, joins on the corresponding\n  keys.","^U",["^ ","^V",false,"^W",3,"^X",3,"^Y",[["^1;","^1<"],["^1;","^1<","^1="]],"^O",["^P",[["^1;","^1<"],["^1;","^1<","^1="]]],"^Z",["^P",[null,null]]]],"^B","~$clojure.set/join","^3","clojure/set.cljs","^7",11,"^U",["^ ","^V",false,"^W",3,"^X",3,"^Y",[["^1;","^1<"],["^1;","^1<","^1="]],"^O",["^P",[["^1;","^1<"],["^1;","^1<","^1="]]],"^Z",["^P",[null,null]]],"^Y",[["^1;","^1<"],["^1;","^1<","^1="]],"^10",null,"^W",3,"^Z",["^P",[null,null]],"^5",1,"^V",false,"^11",[["^ ","^W",2,"^V",false,"^12",["^A",[null,"^14","^13"]]],["^ ","^W",3,"^V",false,"^12",["^A",[null,"^14"]]]],"^4",105,"^6",105,"^X",3,"^15",true,"^O",["^P",[["^1;","^1<"],["^1;","^1<","^1="]]],"^8","When passed 2 rels, returns the rel corresponding to the natural\n  join. When passed an additional keymap, joins on the corresponding\n  keys."],"~$select",["^ ","^N",null,"^2",["^ ","^3","clojure/set.cljs","^4",61,"^5",7,"^6",61,"^7",13,"^O",["^P",["^Q",["^P",[["~$pred","~$xset"]]]]],"^8","Returns a set of the elements for which pred is true"],"^B","~$clojure.set/select","^3","clojure/set.cljs","^7",13,"^Y",["^P",[["^1@","^1A"]]],"^10",null,"^Z",["^P",[null,null]],"^5",1,"^V",false,"^4",61,"^18",["^A",[null,"^14"]],"^6",61,"^X",2,"^15",true,"^O",["^P",["^Q",["^P",[["^1@","^1A"]]]]],"^8","Returns a set of the elements for which pred is true"],"~$intersection",["^ ","^N",null,"^2",["^ ","^3","clojure/set.cljs","^4",31,"^5",7,"^6",31,"^7",19,"^O",["^P",["^Q",["^P",[["^R"],["^R","^S"],["^R","^S","~$&","^T"]]]]],"^8","Return a set that is the intersection of the input sets","^U",["^ ","^V",true,"^W",2,"^X",2,"^Y",[["^R"],["^R","^S"]],"^O",["^P",[["^R"],["^R","^S"],["^R","^S","~$&","^T"]]],"^Z",["^P",[null,null,null]]]],"^B","~$clojure.set/intersection","^3","clojure/set.cljs","^7",19,"^U",["^ ","^V",true,"^W",2,"^X",2,"^Y",[["^R"],["^R","^S"]],"^O",["^P",[["^R"],["^R","^S"],["^R","^S","~$&","^T"]]],"^Z",["^P",[null,null,null]]],"^Y",[["^R"],["^R","^S"]],"^10",null,"^W",2,"^Z",["^P",[null,null,null]],"^5",1,"^V",true,"^11",[["^ ","^W",1,"^V",false],["^ ","^W",2,"^V",false,"^12",["^A",[null,"^14"]]],["^ ","^W",2,"^V",true,"^12",["^A",[null,"^14"]]]],"^4",31,"^6",31,"^X",2,"^15",true,"^O",["^P",[["^R"],["^R","^S"],["^R","^S","~$&","^T"]]],"^8","Return a set that is the intersection of the input sets"],"~$superset?",["^ ","^N",null,"^2",["^ ","^3","clojure/set.cljs","^4",141,"^5",7,"^6",141,"^7",16,"^O",["^P",["^Q",["^P",[["~$set1","~$set2"]]]]],"^8","Is set1 a superset of set2?"],"^B","~$clojure.set/superset?","^3","clojure/set.cljs","^7",16,"^Y",["^P",[["^1F","^1G"]]],"^10",null,"^Z",["^P",[null,null]],"^5",1,"^V",false,"^4",141,"^18","~$boolean","^6",141,"^X",2,"^15",true,"^O",["^P",["^Q",["^P",[["^1F","^1G"]]]]],"^8","Is set1 a superset of set2?"],"~$index",["^ ","^N",null,"^2",["^ ","^3","clojure/set.cljs","^4",87,"^5",7,"^6",87,"^7",12,"^O",["^P",["^Q",["^P",[["^1;","~$ks"]]]]],"^8","Returns a map of the distinct values of ks in the xrel mapped to a\n  set of the maps in xrel with the corresponding values of ks."],"^B","~$clojure.set/index","^3","clojure/set.cljs","^7",12,"^Y",["^P",[["^1;","^1K"]]],"^10",null,"^Z",["^P",[null,null]],"^5",1,"^V",false,"^4",87,"^18",["^A",[null,"^14"]],"^6",87,"^X",2,"^15",true,"^O",["^P",["^Q",["^P",[["^1;","^1K"]]]]],"^8","Returns a map of the distinct values of ks in the xrel mapped to a\n  set of the maps in xrel with the corresponding values of ks."],"~$bubble-max-key",["^ ","^N",null,"^2",["^ ","^3","clojure/set.cljs","^4",13,"^5",8,"^6",13,"^7",22,"~:private",true,"^O",["^P",["^Q",["^P",[["~$k","~$coll"]]]]]],"^1N",true,"^B","~$clojure.set/bubble-max-key","^3","clojure/set.cljs","^7",22,"^Y",["^P",[["~$k","^1O"]]],"^10",null,"^Z",["^P",[null,null]],"^5",1,"^V",false,"^4",13,"^18","^19","^6",13,"^X",2,"^15",true,"^O",["^P",["^Q",["^P",[["~$k","^1O"]]]]]],"~$subset?",["^ ","^N",null,"^2",["^ ","^3","clojure/set.cljs","^4",135,"^5",7,"^6",135,"^7",14,"^O",["^P",["^Q",["^P",[["^1F","^1G"]]]]],"^8","Is set1 a subset of set2?"],"^B","~$clojure.set/subset?","^3","clojure/set.cljs","^7",14,"^Y",["^P",[["^1F","^1G"]]],"^10",null,"^Z",["^P",[null,null]],"^5",1,"^V",false,"^4",135,"^18","^1I","^6",135,"^X",2,"^15",true,"^O",["^P",["^Q",["^P",[["^1F","^1G"]]]]],"^8","Is set1 a subset of set2?"],"~$rename",["^ ","^N",null,"^2",["^ ","^3","clojure/set.cljs","^4",82,"^5",7,"^6",82,"^7",13,"^O",["^P",["^Q",["^P",[["^1;","~$kmap"]]]]],"^8","Returns a rel of the maps in xrel with the keys in kmap renamed to the vals in kmap"],"^B","~$clojure.set/rename","^3","clojure/set.cljs","^7",13,"^Y",["^P",[["^1;","^1T"]]],"^10",null,"^Z",["^P",[null,null]],"^5",1,"^V",false,"^4",82,"^18",["^A",["^19","^14","^13","~$cljs.core/MetaFn","~$clj-nil"]],"^6",82,"^X",2,"^15",true,"^O",["^P",["^Q",["^P",[["^1;","^1T"]]]]],"^8","Returns a rel of the maps in xrel with the keys in kmap renamed to the vals in kmap"],"~$rename-keys",["^ ","^N",null,"^2",["^ ","^3","clojure/set.cljs","^4",72,"^5",7,"^6",72,"^7",18,"^O",["^P",["^Q",["^P",[["~$map","^1T"]]]]],"^8","Returns the map with the keys in kmap renamed to the vals in kmap"],"^B","~$clojure.set/rename-keys","^3","clojure/set.cljs","^7",18,"^Y",["^P",[["^1Y","^1T"]]],"^10",null,"^Z",["^P",[null,null]],"^5",1,"^V",false,"^4",72,"^18",["^A",[null,"^14"]],"^6",72,"^X",2,"^15",true,"^O",["^P",["^Q",["^P",[["^1Y","^1T"]]]]],"^8","Returns the map with the keys in kmap renamed to the vals in kmap"],"~$project",["^ ","^N",null,"^2",["^ ","^3","clojure/set.cljs","^4",67,"^5",7,"^6",67,"^7",14,"^O",["^P",["^Q",["^P",[["^1;","^1K"]]]]],"^8","Returns a rel of the elements of xrel with only the keys in ks"],"^B","~$clojure.set/project","^3","clojure/set.cljs","^7",14,"^Y",["^P",[["^1;","^1K"]]],"^10",null,"^Z",["^P",[null,null]],"^5",1,"^V",false,"^4",67,"^18",["^A",["^19","^14","^13","^1V","^1W"]],"^6",67,"^X",2,"^15",true,"^O",["^P",["^Q",["^P",[["^1;","^1K"]]]]],"^8","Returns a rel of the elements of xrel with only the keys in ks"],"~$difference",["^ ","^N",null,"^2",["^ ","^3","clojure/set.cljs","^4",46,"^5",7,"^6",46,"^7",17,"^O",["^P",["^Q",["^P",[["^R"],["^R","^S"],["^R","^S","~$&","^T"]]]]],"^8","Return a set that is the first set without elements of the remaining sets","^U",["^ ","^V",true,"^W",2,"^X",2,"^Y",[["^R"],["^R","^S"]],"^O",["^P",[["^R"],["^R","^S"],["^R","^S","~$&","^T"]]],"^Z",["^P",[null,null,null]]]],"^B","~$clojure.set/difference","^3","clojure/set.cljs","^7",17,"^U",["^ ","^V",true,"^W",2,"^X",2,"^Y",[["^R"],["^R","^S"]],"^O",["^P",[["^R"],["^R","^S"],["^R","^S","~$&","^T"]]],"^Z",["^P",[null,null,null]]],"^Y",[["^R"],["^R","^S"]],"^10",null,"^W",2,"^Z",["^P",[null,null,null]],"^5",1,"^V",true,"^11",[["^ ","^W",1,"^V",false],["^ ","^W",2,"^V",false,"^12",["^A",[null,"^14"]]],["^ ","^W",2,"^V",true,"^12",["^A",[null,"^14"]]]],"^4",46,"^6",46,"^X",2,"^15",true,"^O",["^P",[["^R"],["^R","^S"],["^R","^S","~$&","^T"]]],"^8","Return a set that is the first set without elements of the remaining sets"]],"~:require-macros",["^ ","^G","^G"],"~:flags",["^ "],"~:js-deps",["^ "],"~:deps",["^H","^G"]]